깊이 우선 탐색(Depth-First Search, DFS)과 너비 우선 탐색(Breadth-First Search, BFS)은 그래프 탐색 알고리즘으로, 
그래프나 트리 구조에서 특정 정점을 탐색하거나 경로를 찾기 위해 사용됩니다. 두 방법 모두 기본적으로 그래프의 모든 정점을 방문하는 알고리즘이지만, 탐색 방식과 사용하는 자료 구조가 다릅니다.

1. 깊이 우선 탐색 (DFS: Depth-First Search)
DFS는 시작 정점에서 출발해 가능한 한 깊게 들어가다가 더 이상 갈 수 없으면 되돌아오는 방식으로 탐색을 수행합니다. 
재귀적으로 동작하며, 스택 자료 구조를 이용해 정점을 관리합니다.

1.1 알고리즘의 동작 방식

탐색을 시작할 첫 번째 정점(루트)을 스택에 넣고 방문합니다.
스택의 최상단에 있는 정점에서 갈 수 있는 인접 정점 중 방문하지 않은 정점을 선택하고 그 정점을 스택에 넣고 방문합니다.
방문한 정점에서 다시 인접한 방문하지 않은 정점이 있으면, 이 과정을 반복합니다.
더 이상 방문할 정점이 없으면, 스택에서 정점을 하나씩 꺼내면서 이전 정점으로 돌아갑니다.
모든 정점을 방문할 때까지 이 과정을 반복합니다.



2. 너비 우선 탐색 (BFS: Breadth-First Search)
BFS는 시작 정점에서 출발해 인접한 모든 정점을 먼저 탐색하고, 그 다음에 인접한 정점들의 인접 정점을 차례대로 탐색하는 방식입니다. 큐(Queue) 자료 구조를 사용하여 구현됩니다.

2.1 알고리즘의 동작 방식

탐색을 시작할 첫 번째 정점(루트)을 큐에 넣고 방문합니다.
큐에서 정점을 하나 꺼내 그 정점과 인접한 모든 정점을 큐에 넣고 방문합니다.
큐에서 꺼낸 정점의 인접 정점 중 아직 방문하지 않은 정점을 차례대로 큐에 넣습니다.
큐가 빌 때까지 이 과정을 반복합니다.



3. 두 알고리즘의 차이점

DFS는 깊이 우선으로 탐색하며, 스택을 사용하여 정점을 관리합니다. 따라서 메모리 사용량이 비교적 적고, 빠른 탐색이 가능합니다. 
하지만 모든 정점을 방문할 때까지 재귀적으로 탐색하므로 재귀 스택의 크기가 제한될 수 있습니다.

BFS는 너비 우선으로 탐색하며, 큐를 사용하여 정점을 관리합니다. 따라서 메모리 사용량이 비교적 많고, 느린 탐색이 가능합니다. 
하지만 모든 정점을 방문할 때까지 큐를 사용하여 정점을 관리하므로 재귀 스택의 크기가 제한되지 않습니다.
